{"version":3,"sources":["App.js","index.js"],"names":["vec","THREE","Model","open","hinge","props","group","useRef","useGLTF","nodes","materials","useState","hovered","setHovered","useEffect","document","body","style","cursor","useFrame","state","t","clock","getElapsedTime","camera","position","lerp","set","lookAt","current","rotation","x","Math","cos","y","sin","z","ref","onPointerOver","e","stopPropagation","onPointerOut","dispose","three","rotation-x","PI","material","aluminium","geometry","keys","keyboard","trackpad","touchbar","App","setOpen","useSpring","Number","web","main","background","to","h1","opacity","transform","o","dpr","fov","pointLight","intensity","color","fallback","onClick","Environment","preset","ContactShadows","width","height","blur","far","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bed59061.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { Suspense, useEffect, useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { Environment, useGLTF, ContactShadows } from '@react-three/drei'\nimport { useSpring } from '@react-spring/core'\nimport { a as three } from '@react-spring/three'\nimport { a as web } from '@react-spring/web'\nimport { action, makeObservable, observable } from 'mobx'\nimport { createContext } from 'react'\n\nconst vec = new THREE.Vector3()\n\nfunction Model({ open, hinge, ...props }) {\n  const group = useRef()\n  // Load model\n  const { nodes, materials } = useGLTF('/mac-draco.glb')\n  // Take care of cursor state on hover\n  const [hovered, setHovered] = useState(false)\n  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])\n  // Make it float in the air when it's opened\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime()\n    state.camera.position.lerp(vec.set(0, 0, open ? -24 : -32), 0.1)\n    state.camera.lookAt(0, 0, 0)\n    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 2) / 8 + 0.25 : 0, 0.1)\n    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 4) / 4 : 0, 0.1)\n    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 4) / 4 : 0, 0.1)\n    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1)\n  })\n  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx\n  // Events and spring animations were added afterwards\n  return (\n    <group\n      ref={group}\n      {...props}\n      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}\n      onPointerOut={(e) => setHovered(false)}\n      dispose={null}>\n      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>\n        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>\n          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />\n          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />\n          <mesh material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry} />\n        </group>\n      </three.group>\n      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />\n      <group position={[0, -0.1, 3.39]}>\n        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />\n        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />\n      </group>\n      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />\n    </group>\n  )\n}\n\nexport default function App() {\n  // This flag controls open state, alternates between true & false\n  const [open, setOpen] = useState(false)\n  const [showTxt, setTxt] = useState(false)\n  // We turn this into a spring animation that interpolates between 0 and 1\n  const props = useSpring({ open: Number(open) })\n  return (\n    <web.main style={{ background: props.open.to([0, 1], ['#f0f0f0', '#efe22b']) }}>\n      <web.h1 style={{ opacity: props.open.to([0, 1], [1, 0]), transform: props.open.to((o) => `translate3d(-50%,${o * 50 - 100}px,0)`) }}>\n        hello. This is Zulker.\n      </web.h1>\n\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 0], fov: 35 }}>\n        <three.pointLight position={[10, 10, 10]} intensity={1.5} color={props.open.to([0, 1], ['#00', '#000'])} />\n        <Suspense fallback={null}>\n          <group rotation={[0, Math.PI, 0]} onClick={(e) => (e.stopPropagation(), setOpen(!open))}>\n            <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])}></Model>\n          </group>\n          <Environment preset=\"city\" />\n        </Suspense>\n        <ContactShadows rotation-x={Math.PI / 2} position={[0, -4.5, 0]} opacity={0.4} width={20} height={20} blur={2} far={4.5} />\n      </Canvas>\n    </web.main>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}